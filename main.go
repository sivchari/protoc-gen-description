package main

import (
	"flag"
	"fmt"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"

	echov1 "github.com/sivchari/protoc-gen-description/gen/proto/v1"
)

const (
	logPackage = protogen.GoImportPath("log")
)

func main() {
	version := flag.Bool("version", false, "print the version of protoc-gen-go")
	help := flag.Bool("help", false, "print help")
	flag.Parse()

	if *version {
		fmt.Println("protoc-gen-description ver")
		return
	}

	if *help {
		flag.PrintDefaults()
		return
	}

	protogen.Options{}.Run(func(gen *protogen.Plugin) error {
		for _, file := range gen.Files {
			if file.Generate {
				generateFile(gen, file)
			}
		}
		return nil
	})
}

func generateFile(gen *protogen.Plugin, file *protogen.File) {
	if len(file.Messages) == 0 {
		return
	}
	fileNmae := file.GeneratedFilenamePrefix + "_description.go"
	g := gen.NewGeneratedFile(fileNmae, file.GoImportPath)
	g.P("// Code generated by protoc-gen-description. DO NOT EDIT.")
	g.P("// versions:")
	g.P("// - protoc-gen-description v0.0.1")
	g.P("// - ", gen.Request.GetCompilerVersion())
	if file.Proto.GetOptions().GetDeprecated() {
		g.P("// ", file.Desc.Path(), " is deprecated.")
	} else {
		g.P("// ", file.Desc.Path())
	}
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	for _, message := range file.Messages {
		for _, field := range message.Fields {
			o := proto.GetExtension(field.Desc.Options(), echov1.E_Description).(*echov1.Description)
			if o == nil {
				continue
			}
			upperFieldName := strings.ReplaceAll(string(field.Desc.Name()), string(field.Desc.Name()[0]), strings.ToUpper(string(field.Desc.Name()[0])))
			g.P("func ", message.Desc.Name(), upperFieldName, "Description() string {")
			g.P(logPackage.Ident("Println"), `("`, message.Desc.Name(), `: `, field.Desc.Name(), `")`)
			g.P("return ", fmt.Sprintf("%q", o.Description))
			g.P("}")
		}
	}
	return
}
